type Cover = record {
  id : nat;
  cid : text;
  cover_name : text;
  cost : nat;
  cover_values : nat;
  capacity_amount : nat;
  chains : text;
  capacity : nat;
  pool_id : nat;
  risk_type : RiskType;
  max_amount : nat;
};
type Deposit = record {
  lp : principal;
  status : Status;
  accrued_payout : nat;
  start_date : nat;
  expiry_date : nat;
  days_left : nat;
  pool_id : nat;
  daily_payout : nat;
  amount : nat;
};
type Pool = record {
  apy : nat;
  tcp : nat;
  tvl : nat;
  pool_name : text;
  percentage_split_balance : nat;
  min_period : nat;
  is_active : bool;
  deposits : vec record { principal; Deposit };
  risk_type : RiskType;
};
type PoolInfo = record {
  apy : nat;
  tcp : nat;
  tvl : nat;
  pool_name : text;
  deposit_amount : nat;
  accrued_payout : nat;
  min_period : nat;
  is_active : bool;
  pool_id : nat;
  daily_payout : nat;
};
type Result = variant { Ok; Err : text };
type Result_1 = variant { Ok : vec principal; Err : text };
type Result_2 = variant { Ok : nat; Err : text };
type Result_3 = variant { Ok : bool; Err : text };
type RiskType = variant { Stablecoin; Slashing; SmartContract; Protocol };
type Status = variant { Active; Withdrawn };
service : {
  addPoolCover : (nat, Cover) -> (Result);
  claimProposalFunds : (nat) -> (Result);
  createPool : (RiskType, text, nat, nat) -> (Result);
  deactivatePool : (nat) -> (Result);
  deposit : (nat, nat64) -> (Result);
  getAllParticipants : () -> (Result_1) query;
  getAllPools : () -> (vec record { nat; Pool }) query;
  getCanisterIds : () -> (opt principal, opt principal, opt principal) query;
  getOwner : () -> (opt principal) query;
  getPool : (nat) -> (opt Pool) query;
  getPoolCovers : (nat) -> (vec Cover);
  getPoolTVL : (nat) -> (Result_2) query;
  getPoolsByAddress : (principal) -> (vec PoolInfo) query;
  getUserDeposit : (nat, principal) -> (opt Deposit) query;
  getUserParticipation : (principal) -> (Result_2) query;
  increasePercentageSplit : (nat, nat) -> ();
  poolActive : (nat) -> (Result_3) query;
  reducePercentageSplit : (nat, nat) -> ();
  setCover : (principal) -> (Result);
  setOwner : (principal) -> (Result);
  updateCanisterIds : (principal, principal, principal) -> ();
  updatePool : (nat, nat, nat) -> (Result);
  updatePoolCovers : (nat, Cover) -> (Result);
  withdraw : (nat, nat) -> (Result);
}